# -*- coding: utf-8 -*-
"""Minimum Current.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jFZsnCRlH3UBBC8OpdnzLMqKAZYtWWnF
"""

!pip install --upgrade neurodynex3



import brian2 as b2
from neurodynex3.leaky_integrate_and_fire import LIF
from neurodynex3.tools import input_factory,plot_tools



# plot I and vm
plot_tools.plot_voltage_and_current_traces(
state_monitor, step_current, title="min input", firing_threshold=LIF.FIRING_THRESHOLD)
print("nr of spikes: {}".format(spike_monitor.count[0]))  # should be 0

LIF.getting_started()

print("resting potential: {}".format(LIF.V_REST))

# create a step current with amplitude = I_min
I_min= 0.002001*b2.uamp #need to find explaination
step_current = input_factory.get_step_current(
    t_start=5, t_end=100, unit_time=b2.ms,
    amplitude=I_min)  # set I_min to your value

# run the LIF model.
# Note: As we do not specify any model parameters, the simulation runs with the default values
(state_monitor,spike_monitor) = LIF.simulate_LIF_neuron(input_current=step_current, simulation_time = 100 * b2.ms)


# create a step current with amplitude = I_min
import matplotlib.pyplot as plt

tup=[]
#for loop for current in 0nA to 100 nA
for i in range(0,100,5) :
  I_min= i*b2.namp #need to find explaination
  step_current = input_factory.get_step_current(
      t_start=5, t_end=100, unit_time=b2.ms,
      amplitude=I_min)  # set I_min to your value

  # run the LIF model.
  # Note: As we do not specify any model parameters, the simulation runs with the default values
  (state_monitor,spike_monitor) = LIF.simulate_LIF_neuron(input_current=step_current, simulation_time = 100 * b2.ms)
  tup.append((spike_monitor.count[0],I_min))
print(tup)
plt.plot(*zip(*tup))
plt.show()
